#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

typedef struct {
    int start;
    int size;
    int allocated;
} MemoryBlock;

MemoryBlock memory[MEMORY_SIZE];

void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; ++i) {
        memory[i].start = i;
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

void displayMemory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MEMORY_SIZE; ++i) {
        printf("[%d] Size: %d, Allocated: %s\n", memory[i].start, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
    printf("\n");
}

int allocateMemory(int size, int strategy) {
    int index = -1;

    switch (strategy) {
        case 1: // First Fit
            for (int i = 0; i < MEMORY_SIZE; ++i) {
                if (!memory[i].allocated && memory[i].size >= size) {
                    index = i;
                    break;
                }
            }
            break;

        case 2: // Best Fit
            for (int i = 0; i < MEMORY_SIZE; ++i) {
                if (!memory[i].allocated && memory[i].size >= size) {
                    if (index == -1 || memory[i].size < memory[index].size) {
                        index = i;
                    }
                }
            }
            break;

        case 3: // Worst Fit
            for (int i = 0; i < MEMORY_SIZE; ++i) {
                if (!memory[i].allocated && memory[i].size >= size) {
                    if (index == -1 || memory[i].size > memory[index].size) {
                        index = i;
                    }
                }
            }
            break;

        default:
            printf("Invalid strategy\n");
    }

    if (index != -1) {
        memory[index].size = size;
        memory[index].allocated = 1;
        return index;
    } else {
        printf("Memory allocation failed\n");
        return -1;
    }
}

void deallocateMemory(int index) {
    if (index >= 0 && index < MEMORY_SIZE && memory[index].allocated) {
        memory[index].size = 0;
        memory[index].allocated = 0;
        printf("Memory deallocated successfully\n");
    } else {
        printf("Invalid memory block index\n");
    }
}

int main() {
    int choice, size, strategy, index;

    initializeMemory();

    do {
        printf("1. Allocate Memory\n");
        printf("2. Deallocate Memory\n");
        printf("3. Display Memory\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the size of memory to allocate: ");
                scanf("%d", &size);
                printf("Select allocation strategy:\n");
                printf("1. First Fit\n");
                printf("2. Best Fit\n");
                printf("3. Worst Fit\n");
                printf("Enter strategy choice: ");
                scanf("%d", &strategy);
                index = allocateMemory(size, strategy);
                if (index != -1) {
                    printf("Memory allocated successfully at index %d\n", index);
                }
                break;

            case 2:
                printf("Enter the index of memory block to deallocate: ");
                scanf("%d", &index);
                deallocateMemory(index);
                break;

            case 3:
                displayMemory();
                break;

            case 4:
                printf("Exiting program\n");
                break;

            default:
                printf("Invalid choice\n");
        }

    } while (choice != 4);

    return 0;
}
