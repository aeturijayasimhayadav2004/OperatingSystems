#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 50

// Structure to represent a memory block
struct MemoryBlock {
    int size;
    int allocated;
};

// Function to allocate memory using Best Fit algorithm
void bestFit(struct MemoryBlock memory[], int n, int processSize) {
    int bestFitIndex = -1;
    
    for (int i = 0; i < n; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (bestFitIndex == -1 || memory[i].size < memory[bestFitIndex].size) {
                bestFitIndex = i;
            }
        }
    }
    
    if (bestFitIndex != -1) {
        // Allocate memory for the process
        memory[bestFitIndex].allocated = 1;
        printf("Memory allocated successfully at block %d\n", bestFitIndex + 1);
    } else {
        printf("Not enough memory available for the process.\n");
    }
}

// Function to display the current state of memory
void displayMemory(struct MemoryBlock memory[], int n) {
    printf("Memory Blocks:\n");
    for (int i = 0; i < n; i++) {
        printf("Block %d: Size: %d, Allocated: %s\n", i + 1, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
    printf("\n");
}

int main() {
    int totalMemory, numBlocks, processSize;

    printf("Enter total memory size: ");
    scanf("%d", &totalMemory);

    printf("Enter the number of memory blocks: ");
    scanf("%d", &numBlocks);

    // Creating an array of MemoryBlock structures
    struct MemoryBlock memory[MAX_BLOCKS];

    // Initializing memory blocks
    for (int i = 0; i < numBlocks; i++) {
        printf("Enter size of block %d: ", i + 1);
        scanf("%d", &memory[i].size);
        memory[i].allocated = 0;
    }

    // Display initial state of memory
    displayMemory(memory, numBlocks);

    // Allocate memory for processes
    while (1) {
        printf("Enter process size (enter -1 to exit): ");
        scanf("%d", &processSize);

        if (processSize == -1) {
            break;
        }

        bestFit(memory, numBlocks, processSize);
        displayMemory(memory, numBlocks);
    }

    return 0;
}
