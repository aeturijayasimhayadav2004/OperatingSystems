#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t mutex, write_block;
int data = 0, reader_count = 0;

void *reader(void *arg) {
    // Entry Section
    sem_wait(&mutex);
    reader_count++;
    if (reader_count == 1) {
        sem_wait(&write_block);
    }
    sem_post(&mutex);

    // Critical Section (reading)
    printf("Reader %d reads data: %d\n", *((int *)arg), data);

    // Exit Section
    sem_wait(&mutex);
    reader_count--;
    if (reader_count == 0) {
        sem_post(&write_block);
    }
    sem_post(&mutex);

    pthread_exit(NULL);
}

void *writer(void *arg) {
    // Entry Section
    sem_wait(&write_block);

    // Critical Section (writing)
    data++;
    printf("Writer %d writes data: %d\n", *((int *)arg), data);

    // Exit Section
    sem_post(&write_block);

    pthread_exit(NULL);
}

int main() {
    int i;
    pthread_t readers[5], writers[5];
    sem_init(&mutex, 0, 1);
    sem_init(&write_block, 0, 1);

    // Creating threads for readers
    for (i = 0; i < 5; i++) {
        int *arg = malloc(sizeof(*arg));
        *arg = i + 1;
        pthread_create(&readers[i], NULL, reader, arg);
    }

    // Creating threads for writers
    for (i = 0; i < 5; i++) {
        int *arg = malloc(sizeof(*arg));
        *arg = i + 1;
        pthread_create(&writers[i], NULL, writer, arg);
    }

    // Joining threads
    for (i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&write_block);

    return 0;
}
